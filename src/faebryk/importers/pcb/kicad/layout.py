# This file is part of the faebryk project
# SPDX-License-Identifier: MIT

import logging
from pathlib import Path

from faebryk.core.module import Module
from faebryk.exporters.pcb.kicad.transformer import PCB_Transformer
from faebryk.libs.kicad.fileformats_common import C_xyr

logger = logging.getLogger(__name__)


def extract_hierarchcal_layout(
    transformer: PCB_Transformer, layout_file: Path, root_modules: list[Module]
):  # , kicad_pcb: Path):
    """
    Extracts a hierarchical layout from a KiCad PCB file.

    The layout is extracted by going though all mopdules in the app, and check for the
    has_linked_kicad_footprint trait.
    If the trait is found, the footprint coordinate is extracted and added to the
    hierarchical layout of that module.
    """

    # pcb = C_kicad_pcb_file.loads(kicad_pcb)
    # app = transformer.app

    layouts = list[tuple[str, type[Module], C_xyr]]()

    out = (
        "# This file is part of the faebryk project\n"
        "# SPDX-License-Identifier: MIT\n"
        "\n"
        '"""\n'
        "This file is autogenerated by faebryk.importers.pcb.kicad.layout.py\n"
        '"""\n'
        "\n"
        "Point = F.has_pcb_position.Point\n"
        "L = F.has_pcb_position.layer_type\n"
        "LVL = LayoutTypeHierarchy.Level\n"
        "\n"
    )

    for root_module in root_modules:
        root_module_name = root_module.get_name()
        root_layout = ""
        for module in [
            m
            for m in root_module.get_children_modules(types=Module, direct_only=False)
            if m.has_trait(PCB_Transformer.has_linked_kicad_footprint)
        ]:
            footprint = module.get_trait(
                PCB_Transformer.has_linked_kicad_footprint
            ).get_fp()
            footprint_pos = footprint.at

            # logger.info(f"Footprint of {module.get_name()} is at {footprint_pos}")

            layouts.append(
                (
                    module.get_full_name(types=False)
                    .replace("*", "")
                    .replace(".footprint", ""),
                    type(module),
                    footprint_pos,
                )
            )

            root_layout += (
                "\n".join(
                    f"LVL(  # {root_module_name}{module_name}\n"
                    f"    mod_type={module_type},\n"
                    "    layout=LayoutAbsolute(\n"
                    f"            Point(({footprint_pos.x}, {footprint_pos.y}, {footprint_pos.r}, L.NONE)),\n"  # noqa E501
                    "       ),\n"
                    "   )\n"
                    ")\n"
                    for module_name, module_type, footprint_pos in layouts
                )
                + "\n"
            )

        out += (
            f"{root_module_name}.add_trait(\n"
            "F.has_pcb_layout_defined(\n"
            "    LayoutTypeHierarchy(layouts=[\n"
            f"      {root_layout}\n"
            "    ])\n"
            ")\n"
        )

    layout_file.write_text(out)
